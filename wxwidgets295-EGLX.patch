--- src/unix/glx11.cpp	2013-09-30 00:57:55.000000000 +0200
+++ src/unix/glx11.cpp	2013-09-30 01:06:48.000000000 +0200
@@ -45,6 +45,7 @@
 
 wxGLContext::wxGLContext(wxGLCanvas *gc, const wxGLContext *other)
 {
+#if 0
     if ( wxGLCanvas::GetGLXVersion() >= 13 )
     {
         GLXFBConfig *fbc = gc->GetGLXFBConfig();
@@ -56,6 +57,7 @@
     }
     else // GLX <= 1.2
     {
+#endif
         XVisualInfo *vi = gc->GetXVisualInfo();
         wxCHECK_RET( vi, wxT("invalid visual for OpenGL") );
 
@@ -94,9 +96,11 @@
 /* static */
 bool wxGLContext::MakeCurrent(GLXDrawable drawable, GLXContext context)
 {
+#if 0
     if (wxGLCanvas::GetGLXVersion() >= 13)
         return glXMakeContextCurrent( wxGetX11Display(), drawable, drawable, context);
     else // GLX <= 1.2 doesn't have glXMakeContextCurrent()
+#endif
         return glXMakeCurrent( wxGetX11Display(), drawable, context);
 }
 
@@ -177,9 +181,10 @@
 
         // use double-buffered true colour by default
         glattrs[i++] = GLX_DOUBLEBUFFER;
-
+#if 0
         if ( GetGLXVersion() < 13 )
         {
+#endif
             // default settings if attriblist = 0
             glattrs[i++] = GLX_RGBA;
             glattrs[i++] = GLX_DEPTH_SIZE;   glattrs[i++] = 1;
@@ -187,13 +192,14 @@
             glattrs[i++] = GLX_GREEN_SIZE;   glattrs[i++] = 1;
             glattrs[i++] = GLX_BLUE_SIZE;    glattrs[i++] = 1;
             glattrs[i++] = GLX_ALPHA_SIZE;   glattrs[i++] = 0;
+#if 0
         }
         else // recent GLX can choose the defaults on its own just fine
         {
             // we just need to have a value after GLX_DOUBLEBUFFER
             glattrs[i++] = True;
         }
-
+#endif
         glattrs[i] = None;
 
         wxASSERT_MSG( i < n, wxT("GL attributes buffer too small") );
@@ -326,8 +332,10 @@
             {
                 // as explained above, for pre 1.3 API the attribute just needs
                 // to be present so we only add its value when using the new API
+#if 0
                 if ( GetGLXVersion() >= 13 )
                     glattrs[p++] = True;
+#endif
             }
             else // attribute with real (non-boolean) value
             {
@@ -354,6 +362,7 @@
 
     Display * const dpy = wxGetX11Display();
 
+#if 0
     if ( GetGLXVersion() >= 13 )
     {
         int returned;
@@ -371,9 +380,12 @@
     }
     else // GLX <= 1.2
     {
+#endif
         *pFBC = NULL;
         *pXVisual = glXChooseVisual(dpy, DefaultScreen(dpy), data);
+#if 0
     }
+#endif
 
     return *pXVisual != NULL;
 }
--- src/gtk/glcanvas.cpp	2013-09-30 01:10:00.000000000 +0200
+++ src/gtk/glcanvas.cpp	2013-09-30 01:14:48.000000000 +0200
@@ -17,7 +17,9 @@
 #include "wx/glcanvas.h"
 
 #include <gtk/gtk.h>
+#if 0
 #include <gdk/gdkx.h>
+#endif
 #include "wx/gtk/private/gtk2-compat.h"
 
 #if WXWIN_COMPATIBILITY_2_8
@@ -118,10 +120,15 @@
     {
         const XVisualInfo* xvi = win->GetXVisualInfo();
         GdkVisual* visual = gtk_widget_get_visual(win->m_wxwindow);
+#if 0
         if (GDK_VISUAL_XVISUAL(visual)->visualid != xvi->visualid)
         {
+#endif
             GdkScreen* screen = gtk_widget_get_screen(win->m_wxwindow);
+#if 0
             visual = gdk_x11_screen_lookup_visual(screen, xvi->visualid);
+#endif
+            visual = gdk_screen_get_system_visual (screen);
 #ifdef __WXGTK3__
             gtk_widget_set_visual(win->m_wxwindow, visual);
 #else
@@ -129,7 +136,9 @@
             gtk_widget_set_colormap(win->m_wxwindow, colormap);
             g_object_unref(colormap);
 #endif
+#if 0
         }
+#endif
         // remove hook
         return false;
     }
--- src/gtk/utilsgtk.cpp	2013-09-30 01:15:27.000000000 +0200
+++ src/gtk/utilsgtk.cpp	2013-09-30 01:21:06.000000000 +0200
@@ -32,6 +32,12 @@
 #ifdef GDK_WINDOWING_X11
 #include <gdk/gdkx.h>
 #endif
+#ifdef GDK_WINDOWING_WAYLAND
+extern "C" {
+#include "wx/EGLX.h"
+#include "wx/EGLX-gtkx11.h"
+}
+#endif
 
 #if wxDEBUG_LEVEL
     #include "wx/gtk/assertdlg_gtk.h"
@@ -75,7 +81,7 @@
 // display characteristics
 // ----------------------------------------------------------------------------
 
-#ifdef GDK_WINDOWING_X11
+#if defined GDK_WINDOWING_X11 || defined GDK_WINDOWING_WAYLAND
 void *wxGetDisplay()
 {
     return GDK_DISPLAY_XDISPLAY(gtk_widget_get_display(wxGetRootWindow()));
--- src/common/glcmn.cpp	2013-09-30 01:22:31.000000000 +0200
+++ src/common/glcmn.cpp	2013-09-30 01:25:34.000000000 +0200
@@ -88,8 +88,9 @@
             wxLogError(_("Failed to allocate colour for OpenGL"));
             return false;
         }
-
+#if 0
         glIndexi(pix);
+#endif
     }
 #endif
     return true;
--- include/wx/glcanvas.h	2013-09-30 01:30:13.000000000 +0200
+++ include/wx/glcanvas.h	2013-09-30 01:31:16.000000000 +0200
@@ -23,6 +23,14 @@
 class WXDLLIMPEXP_FWD_GL wxGLCanvas;
 class WXDLLIMPEXP_FWD_GL wxGLContext;
 
+#include <GLES/gl.h>
+#define HAVE_JWZGLES
+extern "C" {
+#include "jwzgles.h"
+#include "EGLX.h"
+#include "EGLX-gtkx11.h"
+}
+
 // ----------------------------------------------------------------------------
 // Constants for attributes list
 // ----------------------------------------------------------------------------
--- include/wx/unix/glx11.h	2013-09-30 01:37:29.000000000 +0200
+++ include/wx/unix/glx11.h	2013-09-30 01:39:43.000000000 +0200
@@ -11,8 +11,12 @@
 #ifndef _WX_UNIX_GLX11_H_
 #define _WX_UNIX_GLX11_H_
 
+#if 0
 #include <GL/glx.h>
-
+#endif
+extern "C" {
+#include "wx/EGLX.h"
+}
 // ----------------------------------------------------------------------------
 // wxGLContext
 // ----------------------------------------------------------------------------
